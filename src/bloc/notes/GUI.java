/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package bloc.notes;

import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Color;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

import javax.swing.AbstractAction;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import java.awt.event.ActionEvent;
import java.io.File;
import java.io.IOException;

import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;


/**
 *
 * @author Remi JARA
 */
public class GUI extends javax.swing.JFrame {
    /**
     * Le nom du fichier actuel
     */
    private String file_name;
    /**
     * Le contenu du text (du fichier ouvert ou enregistré)
     */
    private String file_text;
    /**
     * Le bloc Notes qui permet de gérer les enregistrements, les ouvertures.
     */
    private BlocNotes bloc_notes;
    /**
     * Le presse papier
     */
    private String clipboard = "";
    /**
     * font choisi par l'utilisateur
     */
    private Font font;
    /**
     * Zoom actuel
     */
    private int zoom;
    /**
     * Creates new form GUI
     * @param bloc_notes Le bloc Notes qui permet de gérer les enregistrements, les ouvertures.
     */
    public GUI(BlocNotes bloc_notes) {
        this.bloc_notes = bloc_notes;
        this.file_text = "";
        this.zoom = 100;
        this.font = new Font("Arial", Font.PLAIN, 20);
        //set icon of the frame
        this.setIconImage(new javax.swing.ImageIcon(getClass().getResource("/bloc/notes/note_pad.png")).getImage());
        initLookAndFeel("Windows");
        initComponents();
        this.set_barre_etat();
    }

    
    /** 
     * @param laf La nouvelle laf à appliquer
     */
    private static void initLookAndFeel(String laf){
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if (laf.equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }
    
    
    /** 
     * Retourne le nom du fichier provenant de {@link #file_name}.
     * @return String
     * 
     */
    public String get_file_name(){
        return this.file_name;
    }

    
    /** 
     * Met en place le texte et le nom du fichier (init uniquement)
     * @param text Le texte à mettre dans {@link #text}
     */
    public void set_text(String text){
        this.file_text = text;
        this.text.setText(text);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        file_chooser_open_jframe = new javax.swing.JFrame();
        file_chooser_open = new javax.swing.JFileChooser();
        file_chooser_save_jframe = new javax.swing.JFrame();
        file_chooser_save = new javax.swing.JFileChooser();
        atteindre_jframe = new javax.swing.JFrame();
        atteindre_input = new javax.swing.JTextField();
        atteindre_bouton = new javax.swing.JButton();
        atteindre_annuler = new javax.swing.JButton();
        label_atteindre = new javax.swing.JLabel();
        rechercher_jframe = new javax.swing.JFrame();
        rechercher_label = new javax.swing.JLabel();
        rechercher_input = new javax.swing.JTextField();
        rechercher_suivant_btn = new javax.swing.JButton();
        rechercher_annuler = new javax.swing.JButton();
        direction_label = new javax.swing.JLabel();
        haut_rb = new javax.swing.JRadioButton();
        bas_rb = new javax.swing.JRadioButton();
        rechercher_casse = new javax.swing.JCheckBox();
        rechercher_retour_ligne = new javax.swing.JCheckBox();
        rechercher_group_rb = new javax.swing.ButtonGroup();
        remplacer_jframe = new javax.swing.JFrame();
        remplacer_label = new javax.swing.JLabel();
        remplacer_input = new javax.swing.JTextField();
        remplacer_suivant_btn1 = new javax.swing.JButton();
        remplacer_annuler1 = new javax.swing.JButton();
        remplacer_casse = new javax.swing.JCheckBox();
        remplacer_retour_ligne = new javax.swing.JCheckBox();
        remplacer_label2 = new javax.swing.JLabel();
        remplacer_input2 = new javax.swing.JTextField();
        remplacer_btn = new javax.swing.JButton();
        remplacer_tout_btn = new javax.swing.JButton();
        file_chooser_open_font_jframe = new javax.swing.JFrame();
        file_chooser_open_font = new javax.swing.JFileChooser();
        couleur_font_jframe = new javax.swing.JFrame();
        couleur_fond_jframe = new javax.swing.JFrame();
        couleur_font_chooser = new javax.swing.JColorChooser();
        couleur_fond_chooser = new javax.swing.JColorChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        text = new javax.swing.JTextArea();
        barre_etat = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fichier_menu = new javax.swing.JMenu();
        nouveau = new javax.swing.JMenuItem();
        nouvelle_fenetre = new javax.swing.JMenuItem();
        ouvrir = new javax.swing.JMenuItem();
        enregistrer = new javax.swing.JMenuItem();
        enregistrer_sous = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        quitter = new javax.swing.JMenuItem();
        edition_menu = new javax.swing.JMenu();
        annuler = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        couper = new javax.swing.JMenuItem();
        copier = new javax.swing.JMenuItem();
        coller = new javax.swing.JMenuItem();
        suppr = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        rechercher = new javax.swing.JMenuItem();
        rechercher_suivant = new javax.swing.JMenuItem();
        rechercher_precedent = new javax.swing.JMenuItem();
        remplacer = new javax.swing.JMenuItem();
        atteindre = new javax.swing.JMenuItem();
        selectionner_tout = new javax.swing.JMenuItem();
        date_heure = new javax.swing.JMenuItem();
        format_menu = new javax.swing.JMenu();
        retour_ligne_auto = new javax.swing.JCheckBoxMenuItem();
        affichage_menu = new javax.swing.JMenu();
        zoom_menu = new javax.swing.JMenu();
        zoom_avant = new javax.swing.JMenuItem();
        zoom_arriere = new javax.swing.JMenuItem();
        zoom_defaut = new javax.swing.JMenuItem();
        barre_etat_check = new javax.swing.JCheckBoxMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        choisir_font = new javax.swing.JMenuItem();
        font_defaut = new javax.swing.JMenuItem();
        couleur_font = new javax.swing.JMenuItem();
        couleur_fond = new javax.swing.JMenuItem();

        file_chooser_open_jframe.setTitle("Ouvrir");
        //see only txt files in the file chooser
        file_chooser_open.setFileSelectionMode(JFileChooser.FILES_ONLY);
        file_chooser_open.setAcceptAllFileFilterUsed(false);
        file_chooser_open.setFileFilter(new FileNameExtensionFilter("Fichier texte", "txt"));
        //set the icon of the frame
        file_chooser_open_jframe.setIconImage(new javax.swing.ImageIcon(getClass().getResource("/bloc/notes/note_pad.png")).getImage());
        file_chooser_open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                file_chooser_openActionPerformed(evt);
            }
        });

        file_chooser_open_font_jframe.setTitle("Choisir une police");
        //see only txt files in the file chooser
        file_chooser_open_font.setFileSelectionMode(JFileChooser.FILES_ONLY);
        file_chooser_open_font.setAcceptAllFileFilterUsed(false);
        file_chooser_open_font.setFileFilter(new FileNameExtensionFilter("Fichier ttf", "ttf"));
        file_chooser_open_font.setFileFilter(new FileNameExtensionFilter("Fichier otf", "otf"));
        //set the icon of the frame
        file_chooser_open_font_jframe.setIconImage(new javax.swing.ImageIcon(getClass().getResource("/bloc/notes/note_pad.png")).getImage());
        file_chooser_open_font.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                file_chooser_open_fontActionPerformed(evt);
            }
        });

        couleur_font_jframe.setTitle("Choisir une couleur de police");
        couleur_font_jframe.setIconImage(new javax.swing.ImageIcon(getClass().getResource("/bloc/notes/note_pad.png")).getImage());
        couleur_font_chooser.setColor(Color.BLACK);
        couleur_font_chooser.getSelectionModel().addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                couleur_chooser_fontActionPerformed(e);
            }
        });
        couleur_fond_jframe.setTitle("Choisir une couleur de fond");
        couleur_fond_jframe.setIconImage(new javax.swing.ImageIcon(getClass().getResource("/bloc/notes/note_pad.png")).getImage());
        couleur_fond_chooser.setColor(Color.BLACK);
        couleur_fond_chooser.getSelectionModel().addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                couleur_chooser_fondActionPerformed(e);
            }
        });


        javax.swing.GroupLayout file_chooser_open_jframeLayout = new javax.swing.GroupLayout(file_chooser_open_jframe.getContentPane());
        file_chooser_open_jframe.getContentPane().setLayout(file_chooser_open_jframeLayout);
        file_chooser_open_jframeLayout.setHorizontalGroup(
            file_chooser_open_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 516, Short.MAX_VALUE)
            .addGroup(file_chooser_open_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(file_chooser_open_jframeLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(file_chooser_open, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        file_chooser_open_jframeLayout.setVerticalGroup(
            file_chooser_open_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 326, Short.MAX_VALUE)
            .addGroup(file_chooser_open_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(file_chooser_open_jframeLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(file_chooser_open, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout file_chooser_open_font_jframeLayout = new javax.swing.GroupLayout(file_chooser_open_font_jframe.getContentPane());
        file_chooser_open_font_jframe.getContentPane().setLayout(file_chooser_open_font_jframeLayout);
        file_chooser_open_font_jframeLayout.setHorizontalGroup(
            file_chooser_open_font_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 516, Short.MAX_VALUE)
            .addGroup(file_chooser_open_font_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(file_chooser_open_font_jframeLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(file_chooser_open_font, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        file_chooser_open_font_jframeLayout.setVerticalGroup(
            file_chooser_open_font_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 326, Short.MAX_VALUE)
            .addGroup(file_chooser_open_font_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(file_chooser_open_font_jframeLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(file_chooser_open_font, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout couleur_font_jframeLayout = new javax.swing.GroupLayout(couleur_font_jframe.getContentPane());
        couleur_font_jframe.getContentPane().setLayout(couleur_font_jframeLayout);
        couleur_font_jframeLayout.setHorizontalGroup(
            couleur_font_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 640, Short.MAX_VALUE)
            .addGroup(couleur_font_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(couleur_font_jframeLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(couleur_font_chooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        couleur_font_jframeLayout.setVerticalGroup(
            couleur_font_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 324, Short.MAX_VALUE)
            .addGroup(couleur_font_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(couleur_font_jframeLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(couleur_font_chooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout couleur_fond_jframeLayout = new javax.swing.GroupLayout(couleur_fond_jframe.getContentPane());
        couleur_fond_jframe.getContentPane().setLayout(couleur_fond_jframeLayout);
        couleur_fond_jframeLayout.setHorizontalGroup(
            couleur_fond_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 640, Short.MAX_VALUE)
            .addGroup(couleur_fond_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(couleur_fond_jframeLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(couleur_fond_chooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        couleur_fond_jframeLayout.setVerticalGroup(
            couleur_fond_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 324, Short.MAX_VALUE)
            .addGroup(couleur_fond_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(couleur_fond_jframeLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(couleur_fond_chooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        file_chooser_save_jframe.setTitle("Enregistrer sous");
        file_chooser_save_jframe.setIconImage(new javax.swing.ImageIcon(getClass().getResource("/bloc/notes/note_pad.png")).getImage());
        javax.swing.GroupLayout file_chooser_save_jframeLayout = new javax.swing.GroupLayout(file_chooser_save_jframe.getContentPane());
        file_chooser_save_jframe.getContentPane().setLayout(file_chooser_save_jframeLayout);
        file_chooser_save_jframeLayout.setHorizontalGroup(
            file_chooser_save_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
            .addGroup(file_chooser_save_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(file_chooser_save_jframeLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(file_chooser_save, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        file_chooser_save_jframeLayout.setVerticalGroup(
            file_chooser_save_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
            .addGroup(file_chooser_save_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(file_chooser_save_jframeLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(file_chooser_save, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        atteindre_jframe.setTitle("Atteindre");
        atteindre_jframe.setResizable(true);
        atteindre_jframe.setPreferredSize(new java.awt.Dimension(250, 150));
        //set no icon at all to atteindre_jframe
        atteindre_jframe.setIconImage(null);
        atteindre_input.setText("");
        atteindre_input.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                atteindre_inputKeyReleased(evt);
            }
        });

        atteindre_bouton.setText("Atteindre");
        atteindre_bouton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atteindre_boutonActionPerformed(evt);
            }
        });

        atteindre_annuler.setText("Annuler");
        atteindre_annuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atteindre_annulerActionPerformed(evt);
            }
        });

        label_atteindre.setText("Numéro de ligne :");

        javax.swing.GroupLayout atteindre_jframeLayout = new javax.swing.GroupLayout(atteindre_jframe.getContentPane());
        atteindre_jframe.getContentPane().setLayout(atteindre_jframeLayout);
        atteindre_jframeLayout.setHorizontalGroup(
            atteindre_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(atteindre_jframeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(atteindre_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, atteindre_jframeLayout.createSequentialGroup()
                        .addGroup(atteindre_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(atteindre_input)
                            .addGroup(atteindre_jframeLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(atteindre_bouton)
                                .addGap(18, 18, 18)
                                .addComponent(atteindre_annuler)))
                        .addGap(15, 15, 15))
                    .addGroup(atteindre_jframeLayout.createSequentialGroup()
                        .addComponent(label_atteindre, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        atteindre_jframeLayout.setVerticalGroup(
            atteindre_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, atteindre_jframeLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(label_atteindre)
                .addGap(18, 18, 18)
                .addComponent(atteindre_input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(atteindre_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(atteindre_annuler)
                    .addComponent(atteindre_bouton))
                .addGap(14, 14, 14))
        );

        rechercher_jframe.setTitle("Rechercher");
        rechercher_jframe.setAlwaysOnTop(true);
        rechercher_jframe.setIconImage(null);
        rechercher_label.setText("Rechercher :");

        rechercher_suivant_btn.setText("Suivant");
        rechercher_suivant_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rechercher_suivant_btnActionPerformed(evt);
            }
        });

        rechercher_annuler.setText("Annuler");
        rechercher_annuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rechercher_annulerActionPerformed(evt);
            }
        });

        direction_label.setText("Direction");

        rechercher_group_rb.add(haut_rb);
        haut_rb.setText("Haut");

        rechercher_group_rb.add(bas_rb);
        bas_rb.setSelected(true);
        bas_rb.setText("Bas");

        rechercher_casse.setText("Respecter la casse");

        rechercher_retour_ligne.setText("Retour à la ligne");

        javax.swing.GroupLayout rechercher_jframeLayout = new javax.swing.GroupLayout(rechercher_jframe.getContentPane());
        rechercher_jframe.getContentPane().setLayout(rechercher_jframeLayout);
        rechercher_jframeLayout.setHorizontalGroup(
            rechercher_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rechercher_jframeLayout.createSequentialGroup()
                .addGroup(rechercher_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(rechercher_jframeLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(rechercher_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rechercher_casse)
                            .addComponent(rechercher_retour_ligne))
                        .addGap(39, 39, 39)
                        .addGroup(rechercher_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(haut_rb)
                            .addComponent(direction_label))
                        .addGroup(rechercher_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(rechercher_jframeLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(bas_rb))
                            .addGroup(rechercher_jframeLayout.createSequentialGroup()
                                .addGap(56, 56, 56)
                                .addComponent(rechercher_annuler)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(rechercher_jframeLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(rechercher_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rechercher_input, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rechercher_suivant_btn)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        rechercher_jframeLayout.setVerticalGroup(
            rechercher_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rechercher_jframeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rechercher_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rechercher_label)
                    .addComponent(rechercher_input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rechercher_suivant_btn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(rechercher_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rechercher_annuler)
                    .addComponent(direction_label)
                    .addComponent(rechercher_casse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rechercher_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(haut_rb)
                    .addComponent(bas_rb)
                    .addComponent(rechercher_retour_ligne))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        remplacer_jframe.setTitle("Remplacer");
        remplacer_jframe.setAlwaysOnTop(true);
        remplacer_jframe.setIconImage(null);
        remplacer_label.setText("Rechercher :");

        remplacer_suivant_btn1.setText("Suivant");
        remplacer_suivant_btn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remplacer_suivant_btn1ActionPerformed(evt);
            }
        });

        remplacer_annuler1.setText("Annuler");
        remplacer_annuler1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remplacer_annuler1ActionPerformed(evt);
            }
        });

        remplacer_casse.setText("Respecter la casse");

        remplacer_retour_ligne.setText("Retour à la ligne");

        remplacer_label2.setText("Remplacer par :");

        remplacer_btn.setText("Remplacer");
        remplacer_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remplacer_btnActionPerformed(evt);
            }
        });

        remplacer_tout_btn.setText("Remplacer tout");
        remplacer_tout_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remplacer_tout_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout remplacer_jframeLayout = new javax.swing.GroupLayout(remplacer_jframe.getContentPane());
        remplacer_jframe.getContentPane().setLayout(remplacer_jframeLayout);
        remplacer_jframeLayout.setHorizontalGroup(
            remplacer_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(remplacer_jframeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(remplacer_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(remplacer_jframeLayout.createSequentialGroup()
                        .addGroup(remplacer_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(remplacer_label2)
                            .addComponent(remplacer_label))
                        .addGap(18, 18, 18)
                        .addGroup(remplacer_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(remplacer_input2, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(remplacer_input, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                        .addGroup(remplacer_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(remplacer_btn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(remplacer_suivant_btn1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(remplacer_jframeLayout.createSequentialGroup()
                        .addGroup(remplacer_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(remplacer_casse)
                            .addComponent(remplacer_retour_ligne))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(remplacer_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(remplacer_annuler1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(remplacer_tout_btn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        remplacer_jframeLayout.setVerticalGroup(
            remplacer_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(remplacer_jframeLayout.createSequentialGroup()
                .addGroup(remplacer_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(remplacer_jframeLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(remplacer_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(remplacer_label)
                            .addComponent(remplacer_input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addGroup(remplacer_jframeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(remplacer_label2)
                            .addComponent(remplacer_input2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addComponent(remplacer_casse)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(remplacer_retour_ligne))
                    .addGroup(remplacer_jframeLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(remplacer_suivant_btn1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(remplacer_btn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(remplacer_tout_btn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(remplacer_annuler1)))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        this.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        this.setTitle("Sans titre - Bloc-notes");
        this.setPreferredSize(new java.awt.Dimension(800, 600));
        this.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        this.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        text.setColumns(20);
        text.setFont(this.font); // NOI18N
        text.setRows(5);
        text.setBorder(javax.swing.BorderFactory.createEmptyBorder());
        text.getInputMap().put(KeyStroke.getKeyStroke("control C"), "copy");
        text.getActionMap().put("copy", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                copierActionPerformed(e);
            }
        });
        text.getInputMap().put(KeyStroke.getKeyStroke("control V"), "paste");
        text.getActionMap().put("paste", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                collerActionPerformed(e);
            }
        });
        text.getInputMap().put(KeyStroke.getKeyStroke("control X"), "cut");
        text.getActionMap().put("cut", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                couperActionPerformed(e);
            }
        });
        text.getInputMap().put(KeyStroke.getKeyStroke("DELETE"), "supprimer");
        text.getActionMap().put("supprimer", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                supprActionPerformed(e);
            }
        });
        text.getInputMap().put(KeyStroke.getKeyStroke("control H"), "remplacer");
        text.getActionMap().put("remplacer", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                remplacerActionPerformed(e);
            }
        });
        text.getInputMap().put(KeyStroke.getKeyStroke("control A"), "all");
        text.getActionMap().put("all", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                selectionner_toutActionPerformed(e);
            }
        });
        text.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                textCaretUpdate(evt);
            }
        });
        text.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                textMouseReleased(evt);
            }
        });
        text.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(text);

        this.getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        barre_etat.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        barre_etat.setText("Ligne 1 - Colonne 1 - Zoom 100%");
        this.getContentPane().add(barre_etat, java.awt.BorderLayout.PAGE_END);

        fichier_menu.setText("Fichier");

        nouveau.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        nouveau.setText("Nouveau");
        nouveau.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nouveauActionPerformed(evt);
            }
        });
        fichier_menu.add(nouveau);

        nouvelle_fenetre.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        nouvelle_fenetre.setText("Nouvelle fenêtre");
        nouvelle_fenetre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nouvelle_fenetreActionPerformed(evt);
            }
        });
        fichier_menu.add(nouvelle_fenetre);

        ouvrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        ouvrir.setText("Ouvrir...");
        ouvrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ouvrirActionPerformed(evt);
            }
        });
        fichier_menu.add(ouvrir);

        enregistrer.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        enregistrer.setText("Enregistrer");
        enregistrer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enregistrerActionPerformed(evt);
            }
        });
        fichier_menu.add(enregistrer);

        enregistrer_sous.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        enregistrer_sous.setText("Enregistrer sous...");
        enregistrer_sous.setToolTipText("");
        enregistrer_sous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enregistrer_sousActionPerformed(evt);
            }
        });
        fichier_menu.add(enregistrer_sous);
        fichier_menu.add(jSeparator2);

        quitter.setText("Quitter");
        quitter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitterActionPerformed(evt);
            }
        });
        fichier_menu.add(quitter);
        jMenuBar1.setBorder(javax.swing.BorderFactory.createEmptyBorder());
        jMenuBar1.add(fichier_menu);

        edition_menu.setText("Edition");

        annuler.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        annuler.setText("Annuler");
        annuler.setEnabled(false);
        annuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                annulerActionPerformed(evt);
            }
        });
        edition_menu.add(annuler);
        edition_menu.add(jSeparator3);

        couper.setAccelerator(KeyStroke.getKeyStroke("control X"));
        couper.setText("Couper");
        couper.setEnabled(false);
        couper.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                couperActionPerformed(evt);
            }
        });
        edition_menu.add(couper);

        copier.setAccelerator(KeyStroke.getKeyStroke("control C"));
        copier.setText("Copier");
        copier.setEnabled(false);
        copier.addActionListener( new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
                copierActionPerformed(e);
            }
        });
        edition_menu.add(copier);

        coller.setAccelerator(KeyStroke.getKeyStroke("control V"));
        coller.setText("Coller");
        coller.setEnabled(false);
        coller.addActionListener( new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
                collerActionPerformed(e);
            }
        });
        edition_menu.add(coller);

        suppr.setAccelerator(KeyStroke.getKeyStroke("DELETE"));
        suppr.setText("Supprimer");
        suppr.setEnabled(false);
        suppr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supprActionPerformed(evt);
            }
        });
        edition_menu.add(suppr);
        edition_menu.add(jSeparator4);

        rechercher.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        rechercher.setText("Rechercher");
        rechercher.setEnabled(false);
        rechercher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rechercherActionPerformed(evt);
            }
        });
        edition_menu.add(rechercher);

        rechercher_suivant.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, 0));
        rechercher_suivant.setText("Rechercher le suivant");
        rechercher_suivant.setEnabled(false);
        rechercher_suivant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rechercher_suivantActionPerformed(evt);
            }
        });
        edition_menu.add(rechercher_suivant);

        rechercher_precedent.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, java.awt.event.InputEvent.SHIFT_DOWN_MASK));
        rechercher_precedent.setText("Rechercher le précédent");
        rechercher_precedent.setEnabled(false);
        rechercher_precedent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rechercher_precedentActionPerformed(evt);
            }
        });
        edition_menu.add(rechercher_precedent);

        remplacer.setAccelerator(KeyStroke.getKeyStroke("control H"));
        remplacer.setText("Remplacer");
        remplacer.addActionListener( new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remplacerActionPerformed(evt);
            }
        });
        edition_menu.add(remplacer);

        atteindre.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        atteindre.setText("Atteindre");
        atteindre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atteindreActionPerformed(evt);
            }
        });
        edition_menu.add(atteindre);

        selectionner_tout.setAccelerator(KeyStroke.getKeyStroke("control A"));
        selectionner_tout.setText("Sélectionner tout");
        selectionner_tout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectionner_toutActionPerformed(evt);
            }
        });
        edition_menu.add(selectionner_tout);

        date_heure.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        date_heure.setText("Heure/Date");
        date_heure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                date_heureActionPerformed(evt);
            }
        });
        edition_menu.add(date_heure);

        jMenuBar1.add(edition_menu);

        format_menu.setText("Format");

        retour_ligne_auto.setText("Retour à la ligne automatique");
        retour_ligne_auto.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                retour_ligne_autoStateChanged(evt);
            }
        });
        format_menu.add(retour_ligne_auto);

        jMenuBar1.add(format_menu);

        affichage_menu.setText("Affichage");

        zoom_menu.setText("Zoom");

        zoom_avant.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ADD, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        zoom_avant.setText("Zoom avant");
        zoom_avant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoom_avantActionPerformed(evt);
            }
        });
        zoom_menu.add(zoom_avant);

        zoom_arriere.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_SUBTRACT, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        zoom_arriere.setText("Zoom arrière");
        zoom_arriere.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoom_arriereActionPerformed(evt);
            }
        });
        zoom_menu.add(zoom_arriere);

        zoom_defaut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_NUMPAD0, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        zoom_defaut.setText("Restaurer le zoom par défaut");
        zoom_defaut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoom_defautActionPerformed(evt);
            }
        });
        zoom_menu.add(zoom_defaut);

        affichage_menu.add(zoom_menu);

        barre_etat_check.setSelected(true);
        barre_etat_check.setText("Barre d'état");
        barre_etat_check.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                barre_etat_checkActionPerformed(evt);
            }
        });
        affichage_menu.add(barre_etat_check);
        affichage_menu.add(jSeparator1);

        choisir_font.setText("Choisir une police");
        choisir_font.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choisir_fontActionPerformed(evt);
            }
        });
        affichage_menu.add(choisir_font);

        font_defaut.setText("Police par défaut");
        font_defaut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                font_defautActionPerformed(evt);
            }
        });
        affichage_menu.add(font_defaut);

        couleur_font.setText("Couleur police");
        couleur_font.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                couleur_fontActionPerformed(evt);
            }
        });
        affichage_menu.add(couleur_font);

        couleur_fond.setText("Couleur de fond");
        couleur_fond.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                couleur_fondActionPerformed(evt);
            }
        });
        affichage_menu.add(couleur_fond);

        jMenuBar1.add(affichage_menu);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nouveauActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nouveauActionPerformed
        //if not saved, ask to save
        if(!this.file_text.equals(this.text.getText()) && !this.text.getText().equals("")){
            int reponse = JOptionPane.showConfirmDialog(this, "Voulez-vous enregistrer votre fichier avant de créer un nouveau fichier ?", "Bloc-notes", JOptionPane.YES_NO_CANCEL_OPTION);
            if(reponse == JOptionPane.YES_OPTION){
                this.enregistrer.doClick();
                return;
            }else if(reponse == JOptionPane.NO_OPTION){
                //vider text
                this.text.setText("");
            }
            else{
                //cancel
                return;
            }
        }
        //vider text
        this.text.setText("");
        this.file_text = "";
        this.file_name = null;
        this.set_title();
        
    }//GEN-LAST:event_nouveauActionPerformed

    private void annulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_annulerActionPerformed
        //switch between last text and current text and select it
        String last_text = this.text.getText();
        this.text.setText(this.file_text);
        this.file_text = last_text;
        this.text.selectAll();
    }//GEN-LAST:event_annulerActionPerformed

    private void ouvrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ouvrirActionPerformed
        //if not saved, ask to save
        if(!this.file_text.equals(this.text.getText()) && !this.text.getText().equals("")){
            int reponse = JOptionPane.showConfirmDialog(this, "Voulez-vous enregistrer votre fichier avant d'ouvrir un nouveau fichier ?", "Bloc-notes", JOptionPane.YES_NO_CANCEL_OPTION);
            if(reponse == JOptionPane.YES_OPTION){
                this.enregistrer.doClick();
            }else if(reponse == JOptionPane.NO_OPTION){
                file_chooser_open_jframe.pack();
                file_chooser_open_jframe.setLocationRelativeTo(null);
                file_chooser_open_jframe.setVisible(true);
            }
            else{
                //cancel
                return;
            }
        }
        file_chooser_open_jframe.pack();
        file_chooser_open_jframe.setLocationRelativeTo(null);
        file_chooser_open_jframe.setVisible(true);
    }//GEN-LAST:event_ouvrirActionPerformed

    private void file_chooser_openActionPerformed(java.awt.event.ActionEvent evt){                                             
        //if button "annuler" is clicked
        if(evt.getActionCommand().equals(javax.swing.JFileChooser.CANCEL_SELECTION)){
            file_chooser_open_jframe.dispose();
            return;
        }
        this.text.setText("");
        this.file_name = file_chooser_open.getSelectedFile().getAbsolutePath();
        this.set_title();
        if(file_chooser_open.getSelectedFile() == null){
            file_chooser_open_jframe.dispose();
            return;
        }
        bloc_notes.openFile(this.file_name);
        file_chooser_open_jframe.dispose();
    }                                           

    private void nouvelle_fenetreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nouvelle_fenetreActionPerformed
        //init a new BlocNotes window
        new BlocNotes();
    }//GEN-LAST:event_nouvelle_fenetreActionPerformed

    private void enregistrerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enregistrerActionPerformed
        if(this.file_name == null){
            //launch enregistrer_sous
            this.enregistrer_sous.doClick();
        }else{
            //save file
            this.file_text = this.text.getText();
            this.bloc_notes.enregistrer(this.text.getText(),this.file_name);
        }
        this.set_title();
    }//GEN-LAST:event_enregistrerActionPerformed

    private void quitterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitterActionPerformed
        //close the jFrame
        this.close_window();
        
    }//GEN-LAST:event_quitterActionPerformed

    private void enregistrer_sousActionPerformed(java.awt.event.ActionEvent evt){//GEN-FIRST:event_enregistrer_sousActionPerformed
        //open file chooser to get file path
        file_chooser_save.setDialogTitle("Enregistrer sous");
        file_chooser_save.setFileSelectionMode(JFileChooser.FILES_ONLY);
        file_chooser_save.setAcceptAllFileFilterUsed(false);
        file_chooser_save.setFileFilter(new FileNameExtensionFilter("Fichier texte", "txt"));
        file_chooser_save.showSaveDialog(this);
        if(file_chooser_save.getSelectedFile() == null){
            file_chooser_open_jframe.dispose();
            return;
        }
        String temp_file_name = file_chooser_save.getSelectedFile().getAbsolutePath() + ".txt";
        if(this.bloc_notes.enregistrer_sous(this.text.getText(),temp_file_name) == true){
            this.file_text = this.text.getText();
            this.file_name = temp_file_name;
            this.set_title();
        }
        file_chooser_open_jframe.dispose();
    }//GEN-LAST:event_enregistrer_sousActionPerformed

    private void textKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textKeyReleased
        this.set_title();
        //if the text is not empty, enable rechercher button, rechercher_suivant button and rechercher_precedent button
        if(!this.text.getText().equals("")){
            this.rechercher.setEnabled(true);
            this.rechercher_suivant.setEnabled(true);
            this.rechercher_precedent.setEnabled(true);
        }else{
            this.rechercher.setEnabled(false);
            this.rechercher_suivant.setEnabled(false);
            this.rechercher_precedent.setEnabled(false);
        }

        if(!this.text.getText().equals(this.file_text)){
            this.annuler.setEnabled(true);
        }else{
            this.annuler.setEnabled(false);
        } 
        if(!this.clipboard.equals("")){
            this.coller.setEnabled(true);
        }  
    }//GEN-LAST:event_textKeyReleased

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        this.close_window();
    }//GEN-LAST:event_formWindowClosing

    private void retour_ligne_autoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_retour_ligne_autoStateChanged
        //if auto line return is checked, set the text to auto line return (linewrap)
        if(this.retour_ligne_auto.isSelected()){
            this.text.setLineWrap(true);
        }else{
            this.text.setLineWrap(false);
        }
    }//GEN-LAST:event_retour_ligne_autoStateChanged

    private void selectionner_toutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectionner_toutActionPerformed
        this.text.selectAll();
    }//GEN-LAST:event_selectionner_toutActionPerformed

    private void date_heureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_date_heureActionPerformed
        LocalDateTime currentTime = LocalDateTime.now();
        String time_stamp = currentTime.format(DateTimeFormatter.ofPattern("HH:mm dd/MM/yyyy"));
        //insert time stamp in the text area at the cursor position
        this.text.insert(time_stamp, this.text.getCaretPosition());
        this.set_title();      
    }//GEN-LAST:event_date_heureActionPerformed

    private void zoom_avantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoom_avantActionPerformed
        //increase font size of text (max : 60)
        if(this.zoom < 500){
            this.text.setFont(this.font.deriveFont((float) (this.zoom * 100.0 / 500 + 2)));
        }
        this.set_barre_etat();
        this.setZoom();
    }//GEN-LAST:event_zoom_avantActionPerformed

    private void zoom_arriereActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoom_arriereActionPerformed
        //decrease font size of text (min : 5)
        if(this.zoom > 5){
            this.text.setFont(this.font.deriveFont((float) (this.zoom * 100.0 / 500 - 2)));
        }
        this.set_barre_etat();
        this.setZoom();
    }//GEN-LAST:event_zoom_arriereActionPerformed

    private void zoom_defautActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoom_defautActionPerformed
        this.zoom = 100;
        this.text.setFont(this.font.deriveFont((float) (this.zoom * 100.0 / 500)));
        this.set_barre_etat();
    }//GEN-LAST:event_zoom_defautActionPerformed

    private void atteindreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atteindreActionPerformed
        //open this.atteindre_window
        this.atteindre_jframe.pack();
        //put the window in the middle of Jframe
        this.atteindre_jframe.setLocationRelativeTo(this);
        this.atteindre_jframe.setAlwaysOnTop(true);
        this.atteindre_jframe.setVisible(true);
    }//GEN-LAST:event_atteindreActionPerformed

    private void atteindre_annulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atteindre_annulerActionPerformed
        this.atteindre_jframe.dispose();
    }//GEN-LAST:event_atteindre_annulerActionPerformed

    private void atteindre_boutonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atteindre_boutonActionPerformed
        //get the line number from the text field
        int line_number = Integer.parseInt(this.atteindre_input.getText());
        //set the cursor to the line number
        try {
            this.text.setCaretPosition(this.text.getLineStartOffset(line_number - 1));
            this.atteindre_jframe.dispose();
        } catch (BadLocationException e) {
            this.atteindre_jframe.setAlwaysOnTop(false);
            //if the line number is not valid, show an error message
            JOptionPane.showMessageDialog(this, "Le numéro de ligne dépasse le nombre total de lignes", "Bloc-notes - Aller à la ligne", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_atteindre_boutonActionPerformed

    private void atteindre_inputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_atteindre_inputKeyReleased
        String text = ((JTextField) this.atteindre_input).getText();
        try {
            Integer.parseInt(text);
        } catch (NumberFormatException e) {
            if(text.equals("")){
                this.atteindre_input.setText("");
            }else{
                this.atteindre_jframe.setAlwaysOnTop(false);
                JOptionPane.showMessageDialog(this, "Le numéro de ligne doit être un nombre entier", "Bloc-notes - Aller à la ligne", JOptionPane.ERROR_MESSAGE);
                this.atteindre_input.setText(text.substring(0, text.length() - 1));
            }
        }
    }//GEN-LAST:event_atteindre_inputKeyReleased

    private void rechercherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rechercherActionPerformed
        //open this.rechercher_window
        this.rechercher_jframe.pack();
        //put the window in the middle of Jframe
        this.rechercher_jframe.setLocationRelativeTo(this);
        this.rechercher_jframe.setVisible(true);
    }//GEN-LAST:event_rechercherActionPerformed

    private void rechercher_suivant_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rechercher_suivant_btnActionPerformed
        this.rechercher();
    }//GEN-LAST:event_rechercher_suivant_btnActionPerformed

    private void rechercher_annulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rechercher_annulerActionPerformed
        this.rechercher_jframe.dispose();
    }//GEN-LAST:event_rechercher_annulerActionPerformed

    private void rechercher_suivantActionPerformed(java.awt.event.ActionEvent evt) {
//GEN-FIRST:event_rechercher_suivantActionPerformed
        this.rechercher_suivant(this.rechercher_input.getText(), this.rechercher_casse.isSelected(), this.rechercher_retour_ligne.isSelected());
    }//GEN-LAST:event_rechercher_suivantActionPerformed

    private void rechercher_precedentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rechercher_precedentActionPerformed
        this.rechercher_precedent(this.rechercher_input.getText(), this.rechercher_casse.isSelected(), this.rechercher_retour_ligne.isSelected());
    }//GEN-LAST:event_rechercher_precedentActionPerformed

    private void remplacer_suivant_btn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remplacer_suivant_btn1ActionPerformed
        this.rechercher_suivant(this.remplacer_input.getText(), this.remplacer_casse.isSelected(), this.remplacer_retour_ligne.isSelected());
    }//GEN-LAST:event_remplacer_suivant_btn1ActionPerformed

    private void remplacer_annuler1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remplacer_annuler1ActionPerformed
        this.remplacer_jframe.dispose();
    }//GEN-LAST:event_remplacer_annuler1ActionPerformed

    private void remplacer_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remplacer_btnActionPerformed
        String replace = this.remplacer_input2.getText();
        //if no text is selected, launch this.rechercher_suivant()
        if(this.text.getSelectedText() == null){
            this.rechercher_suivant(this.remplacer_input.getText(), this.remplacer_casse.isSelected(), this.remplacer_retour_ligne.isSelected());

        }else{
            //replace the text
            this.text.replaceSelection(replace);
            //launch this.rechercher_suivant()
            this.rechercher_suivant(this.remplacer_input.getText(), this.remplacer_casse.isSelected(), this.remplacer_retour_ligne.isSelected());
        }

    }//GEN-LAST:event_remplacer_btnActionPerformed

    private void remplacer_tout_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remplacer_tout_btnActionPerformed
        //replace all occurences of this.remplacer_input.getText() with this.remplacer_input2.getText()
        this.text.setText(this.text.getText().replaceAll(this.remplacer_input.getText(), this.remplacer_input2.getText()));
    }//GEN-LAST:event_remplacer_tout_btnActionPerformed

    private void remplacerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remplacerActionPerformed
        //open remplacer_jframe
        this.remplacer_jframe.pack();
        //put the window in the middle of Jframe
        this.remplacer_jframe.setLocationRelativeTo(this);
        this.remplacer_jframe.setVisible(true);
    }//GEN-LAST:event_remplacerActionPerformed

    private void textMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textMouseReleased
        //check if some text is selected
        if(this.text.getSelectedText() != null){
            //enable the buttons
            this.suppr.setEnabled(true);
            this.copier.setEnabled(true);
            this.couper.setEnabled(true);
        } 
        else {
            //disable the buttons
            this.suppr.setEnabled(false);
            this.copier.setEnabled(false);
            this.couper.setEnabled(false);
        }
    }//GEN-LAST:event_textMouseReleased

    private void supprActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supprActionPerformed
        //delete the selected text
        this.text.replaceSelection("");
    }//GEN-LAST:event_supprActionPerformed

    private void copierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copierActionPerformed
        //copy the selected text
        String s = "";
        if (this.text.getSelectedText() != null) {
            s = this.text.getSelectedText();
        }
        this.clipboard = s;
        this.coller.setEnabled(true);
    }//GEN-LAST:event_copierActionPerformed

    private void collerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_collerActionPerformed
        //paste the content of the clipboard at the cursor
        this.text.insert(this.clipboard, this.text.getCaretPosition());
    }//GEN-LAST:event_collerActionPerformed

    private void couperActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_couperActionPerformed
        //copy the selected text and delete it
        this.clipboard = this.text.getSelectedText();
        this.text.replaceSelection("");
        this.coller.setEnabled(true);
    }//GEN-LAST:event_couperActionPerformed

    private void barre_etat_checkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_barre_etat_checkActionPerformed
        this.barre_etat.setVisible(this.barre_etat_check.isSelected());
    }//GEN-LAST:event_barre_etat_checkActionPerformed

    private void textCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_textCaretUpdate
        //update the status bar
        this.set_barre_etat();
    }//GEN-LAST:event_textCaretUpdate

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        //set a responsive layout on jmenuBar1 to fit all jmenuitems
        this.jMenuBar1.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));
        //if all menuitems cant fit, increase height of the jMenuBar to a fixed size to fit another jmenuitem
        if(this.fichier_menu.getWidth() + this.edition_menu.getWidth() + this.format_menu.getWidth() + this.affichage_menu.getWidth() + 13> this.getWidth()){
            this.jMenuBar1.setPreferredSize(new Dimension(this.jMenuBar1.getPreferredSize().width, 23 * 2));
        }
        //if the window is resized and all menuitems can fit, decrease height of the jMenuBar to fit all jmenuitems
        else if(this.fichier_menu.getWidth() + this.edition_menu.getWidth() + this.format_menu.getWidth() + this.affichage_menu.getWidth() < this.getWidth()){
            this.jMenuBar1.setPreferredSize(new Dimension(this.jMenuBar1.getPreferredSize().width, 23));
        }

        //set a responive layout on barre_etat to fit all jlabels
        this.barre_etat.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));
    }//GEN-LAST:event_formComponentResized

    private void choisir_fontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choisir_fontActionPerformed
        file_chooser_open_font_jframe.pack();
        file_chooser_open_font_jframe.setLocationRelativeTo(null);
        file_chooser_open_font_jframe.setVisible(true);
    }//GEN-LAST:event_choisir_fontActionPerformed

    private void font_defautActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_font_defautActionPerformed
        //set the font to default
        Font new_font = new Font("Arial", Font.PLAIN, 66);
        this.font = new_font;
        System.out.print(this.zoom * 100.0 / 500);
        this.font = this.font.deriveFont((float) (this.zoom * 100.0 / 500));
        this.text.setFont(this.font);
        this.set_barre_etat();
    }//GEN-LAST:event_font_defautActionPerformed
    private void couleur_fontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choisir_fontActionPerformed
        couleur_font_jframe.pack();
        couleur_font_jframe.setLocationRelativeTo(null);
        couleur_font_jframe.setVisible(true);
    }

    private void couleur_fondActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choisir_fontActionPerformed
        couleur_fond_jframe.pack();
        couleur_fond_jframe.setLocationRelativeTo(null);
        couleur_fond_jframe.setVisible(true);
    }

    private void couleur_chooser_fontActionPerformed(ChangeEvent evt) {//GEN-FIRST:event_couleur_chooserActionPerformed
        //set the font color
        this.text.setForeground(couleur_font_chooser.getColor());
    }//GEN-LAST:event_couleur_chooserActionPerformed

    private void couleur_chooser_fondActionPerformed(ChangeEvent evt) {//GEN-FIRST:event_couleur_chooserActionPerformed
        //set the font color
        this.text.setBackground(couleur_fond_chooser.getColor());
    }//GEN-LAST:event_couleur_chooserActionPerformed

    private void file_chooser_open_fontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_file_chooser_open_fontActionPerformed
        if(evt.getActionCommand().equals(javax.swing.JFileChooser.CANCEL_SELECTION)){
            file_chooser_open_font_jframe.dispose();
            return;
        }
        String font_name = file_chooser_open_font.getSelectedFile().getAbsolutePath();
        //if ext is ttf
        Font new_font = this.text.getFont();
        try {
            new_font = Font.createFont(Font.TRUETYPE_FONT, new File(font_name));
        } catch (FontFormatException | IOException e1) {
            e1.printStackTrace();
        }
        this.font = new_font;
        //set the new font
        this.font = this.font.deriveFont((float) (this.zoom * 100.0 / 500));
        this.text.setFont(this.font);
        if(file_chooser_open_font.getSelectedFile() == null){
            file_chooser_open_font_jframe.dispose();
            return;
        }
        this.set_barre_etat();
        file_chooser_open_font_jframe.dispose();
    }//GEN-LAST:event_file_chooser_open_fontActionPerformed

    public void setZoom(){
        //fint the current zoom in this.barre_etat (number just before % character)
        String s = this.barre_etat.getText();
        int i = s.indexOf('%');
        //fint the start of the number when two - are found
        int j = s.lastIndexOf('-', i);
        int zoom = Integer.parseInt(s.substring(j + 2, i));
        this.zoom = zoom;
    }

    /**
     * Met à jour le titre en fonction du nom du fichier et s'il est enregistrer ou non
     */
    public void set_title(){
        //get only the title of the file in this.file_name
        String file_name_title;
        try{
            String[] file_name_split = this.file_name.split("\\\\");
            file_name_title = file_name_split[file_name_split.length - 1];
            if(!this.text.getText().equals(this.file_text)){
                setTitle("*" +file_name_title + " - Bloc-notes");
            }
            else{
                
                setTitle(file_name_title + " - Bloc-notes");
            }
        }
        catch(NullPointerException e){
            //no file for the moment
            file_name_title = "Sans titre";
            if(!this.text.getText().equals("") && this.file_name == null){
                setTitle("*" + file_name_title + " - Bloc-notes");
            }else{
                setTitle(file_name_title + " - Bloc-notes");
            }
        }
    }

    /**
     * Met à jour la barre d'état (position du curseur et zoom)
     *
     */
    public void set_barre_etat(){
        int font_size = this.text.getFont().getSize();
        int pourcentage = font_size * 5;
        try {
            this.barre_etat.setText(
                        "Ln " + 
                        (this.text.getLineOfOffset(this.text.getCaretPosition()) + 1) +
                        " - Col " + 
                        (this.text.getCaretPosition() - 
                        this.text.getLineStartOffset(this.text.getLineOfOffset(this.text.getCaretPosition())) + 1) +
                        " - " + 
                        pourcentage + "%"
                        );
        } catch (BadLocationException e) {
            e.printStackTrace();
        }
        this.barre_etat.setText(this.barre_etat.getText() + " - " + this.font.getName());
    }

    /**
     * vérifie si on peut fermer la fenêtre
     */
    public void close_window(){
        //if not saved, ask to save
        if(!this.file_text.equals(this.text.getText()) && !this.text.getText().equals("")){
            int reponse = JOptionPane.showConfirmDialog(this, "Voulez-vous enregistrer votre fichier avant de fermer la fenêtre ?", "Bloc-notes", JOptionPane.YES_NO_CANCEL_OPTION);
            if(reponse == JOptionPane.YES_OPTION){
                this.enregistrer.doClick();
                return;
            }else if(reponse == JOptionPane.NO_OPTION){
                this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                this.dispose();
            }
            else{
                this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
                return;
            }
        }
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        this.dispose();
    }

    
    /** 
     * Sélectionne le suivant si la recherche aboutit
     * @param text le texte recherché
     * @param casse true si la recherche est sensible à la casse
     * @param retour_ligne true si on doit retourner à la ligne
     */
    public void rechercher_suivant(String text, boolean casse, boolean retour_ligne){
        int index = 0;
        //check if the text contains the searched text
        if(!this.text.getText().contains(text)){
            String recherche = "";
            if(this.rechercher_jframe.isVisible()){
                recherche = this.rechercher_input.getText();
                this.rechercher_jframe.setAlwaysOnTop(false);
            }
            else{
                recherche = this.remplacer_input.getText();
                this.remplacer_jframe.setAlwaysOnTop(false);
            }
            JOptionPane.showMessageDialog(this, "Impossible de trouver " + "'" + recherche + "'", "Bloc-notes - Rechercher", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(!casse){
            index = this.text.getText().toLowerCase().indexOf(text.toLowerCase(), this.text.getCaretPosition());
        }
        else{
            index = this.text.getText().indexOf(text, this.text.getCaretPosition());
        }

        if(index != -1){
            this.text.setCaretPosition(index);
            this.text.select(index, index + text.length());
        }else if (!retour_ligne){
            String recherche = "";
            if(this.rechercher_jframe.isVisible()){
                recherche = this.rechercher_input.getText();
                this.rechercher_jframe.setAlwaysOnTop(false);
            }
            else{
                recherche = this.remplacer_input.getText();
                this.remplacer_jframe.setAlwaysOnTop(false);
            }
            JOptionPane.showMessageDialog(this, "Impossible de trouver " + "'" + recherche + "'", "Bloc-notes - Rechercher", JOptionPane.ERROR_MESSAGE);
        }
        else{
            //go to the beginning of the text
            this.text.setCaretPosition(0);
        }


        this.rechercher_jframe.setAlwaysOnTop(true);
        this.remplacer_jframe.setAlwaysOnTop(true);
    }

    
    /** 
     * Sélectionne le précédent si la recherche aboutit
     * @param text le texte recherché
     * @param casse true si la recherche est sensible à la casse
     * @param retour_ligne true si on doit retourner à la ligne
     */
    public void rechercher_precedent(String text, boolean casse, boolean retour_ligne){
        int index = 0;
        String recherche = this.rechercher_input.getText();
        String sous_texte;
        //remove the text after the cursor
        try{
            sous_texte = this.text.getText().substring(0,this.text.getCaretPosition()  - 1);
        }
        catch(StringIndexOutOfBoundsException e){
            this.rechercher_jframe.setAlwaysOnTop(false);
            JOptionPane.showMessageDialog(this, "Impossible de trouver " + "'" + recherche + "'", "Bloc-notes - Rechercher", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //search in the text before the cursor
        if(!casse){
            index = sous_texte.toLowerCase().lastIndexOf(text.toLowerCase());
        }
        else{
            index = sous_texte.lastIndexOf(text);
        }

        if(index != -1){
            this.text.setCaretPosition(index);
            this.text.select(index, index + text.length() );
        }else if (!retour_ligne){
            this.rechercher_jframe.setAlwaysOnTop(false);
            JOptionPane.showMessageDialog(this, "Impossible de trouver " + "'" + recherche + "'", "Bloc-notes - Rechercher", JOptionPane.ERROR_MESSAGE);
        }
        else{
            //set the caret after the text
            this.text.setCaretPosition(this.text.getText().length());
        }

        this.rechercher_jframe.setAlwaysOnTop(true);
    }

    /**
     * Lance la recherche soit {@link #rechercher_suivant(String, boolean, boolean) rechercher_suivant} soit {@link #rechercher_precedent(String, boolean, boolean) rechercher_precedent} en fonction de {@link #haut_rb} et {@link #bas_rb bas_rb}
     */
    public void rechercher(){
        boolean bas = this.bas_rb.isSelected();
        if(bas){
            this.rechercher_suivant(this.rechercher_input.getText(), this.rechercher_casse.isSelected(), this.rechercher_retour_ligne.isSelected());
        }
        else{
            this.rechercher_precedent(this.rechercher_input.getText(), this.rechercher_casse.isSelected(), this.rechercher_retour_ligne.isSelected());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    /**
     * Menu affichage
     */
    private javax.swing.JMenu affichage_menu;
    /**
     * Menu item pour annuler
     */
    private javax.swing.JMenuItem annuler;
    /**
     * Menu item pour lancer le menu de la foncionnalité atteindre {@link #atteindre_jframe atteindre_jframe}
     */
    private javax.swing.JMenuItem atteindre;
    /**
     * Bouton pour annuler la fonctionnalié {@link #atteindre_jframe atteindre_jframe}
     */    
    private javax.swing.JButton atteindre_annuler;
    /**
     * Bouton pour lancer la fonctionnalité {@link #atteindre_jframe atteindre_jframe}
     */
    private javax.swing.JButton atteindre_bouton;
    /**
     * Input pour la fonctionnalité {@link #atteindre_jframe atteindre_jframe}
     * type : int
     */
    private javax.swing.JTextField atteindre_input;
    /**
     * JFrame pour la fonctionnalité {@link #atteindre_jframe atteindre_jframe}
     */
    private javax.swing.JFrame atteindre_jframe;
    /**
     * Label pour la barre d'état
     */
    private javax.swing.JLabel barre_etat;
    /**
     * Check box qui définit si on affiche la {@link #barre_etat barre_etat}
     */
    private javax.swing.JCheckBoxMenuItem barre_etat_check;
    /**
     * Radio bouton pour la foncionnalité {@link #rechercher_jframe rechercher_jframe}
     */
    private javax.swing.JRadioButton bas_rb;
    /**
     * Menu item pour coller le contenu de {@link #clipboard clipboard} dans {@link #text text}
     */
    private javax.swing.JMenuItem coller;
    /**
     * Menu item pour copier le contenu sélectionné de {@link #text text} dans {@link #clipboard clipboard}
     */
    private javax.swing.JMenuItem copier;
    /**
     * Menu item pour couper le contenu sélectionné de {@link #text text} dans {@link #clipboard clipboard}
     */
    private javax.swing.JMenuItem couper;
    /**
     * Menu item pour lancer la fonctionnalité Date/Heure
     */
    private javax.swing.JMenuItem date_heure;
    /**
     * Label de direction de la fenêtre {@link #rechercher_jframe rechercher_jframe}
     */
    private javax.swing.JLabel direction_label;
    /**
     * Menu edition
     */
    private javax.swing.JMenu edition_menu;
    /**
     * Menu item pour enregistrer le contenu de {@link #text text} dans le fichier {@link #file_name file_name}
     */
    private javax.swing.JMenuItem enregistrer;
    /**
     * Menu item pour enregistrer le contenu de {@link #text text} dans un nouveau fichier
     */
    private javax.swing.JMenuItem enregistrer_sous;
    /**
     * Menu fichier
     */
    private javax.swing.JMenu fichier_menu;
    /**
     * File chooser pour ouvrir un fichier
     */
    private javax.swing.JFileChooser file_chooser_open;
    /**
     * fenêtre de {@link #file_chooser_open file_chooser_open}
     */
    private javax.swing.JFrame file_chooser_open_jframe;
    /**
     * File chooser pour enregistrer un fichier
     */
    private javax.swing.JFileChooser file_chooser_save;
    /**
     * fenêtre de {@link #file_chooser_save file_chooser_save}
     */
    private javax.swing.JFrame file_chooser_save_jframe;
    /**
     * Menu format
     */
    private javax.swing.JMenu format_menu;
    /**
     * Radio bouton pour la foncionnalité {@link #rechercher_jframe rechercher_jframe}
     */
    private javax.swing.JRadioButton haut_rb;
    /**
     * Bar de menu
     */
    private javax.swing.JMenuBar jMenuBar1;
    /**
     * Bar de scroll pour {@link #text text}
     */
    private javax.swing.JScrollPane jScrollPane1;
    /**
     * séparateur
     */
    private javax.swing.JPopupMenu.Separator jSeparator2;
    /**
     * séparateur
     */
    private javax.swing.JPopupMenu.Separator jSeparator3;
    /**
     * séparateur
     */
    private javax.swing.JPopupMenu.Separator jSeparator4;
    /**
     * Label pour la fonctionnalité {@link #atteindre_jframe atteindre_jframe}
     */
    private javax.swing.JLabel label_atteindre;
    /**
     * Menu item pour faire un nouveau fichier
     */
    private javax.swing.JMenuItem nouveau;
    /**
     * Menu item pour créer un nouveau {@link BlocNotes}
     */
    private javax.swing.JMenuItem nouvelle_fenetre;
    /**
     * Menu item pour ouvrir un fichier
     */
    private javax.swing.JMenuItem ouvrir;
    /**
     * Menu item pour quitter le {@link BlocNotes}
     */
    private javax.swing.JMenuItem quitter;
    /**
     * Menu item pour lancer la foncionnalité rechercher {@link #rechercher_jframe rechercher_jframe}
     */
    private javax.swing.JMenuItem rechercher;
    /**
     * Bouton de la fenêtre {@link #rechercher_jframe rechercher_jframe} pour annuler
     */
    private javax.swing.JButton rechercher_annuler;
    /**
     * Check box pour la fonctionnalité {@link #rechercher_jframe rechercher_jframe} pour gérer la casse
     */
    private javax.swing.JCheckBox rechercher_casse;
    /**
     * Group de radio bouton pour la fonctionnalité {@link #rechercher_jframe rechercher_jframe} et gérer la direction
     */
    private javax.swing.ButtonGroup rechercher_group_rb;
    /**
     * L'input de la recherche
     */
    private javax.swing.JTextField rechercher_input;
    /**
     * Fenêtre de recherche
     */
    private javax.swing.JFrame rechercher_jframe;
    /**
     * Label pour la fonctionnalité {@link #rechercher_jframe rechercher_jframe}
     */
    private javax.swing.JLabel rechercher_label;
    /**
     * Menu item pour lancer directement la fonctionnalité rechercher {@link #rechercher_jframe rechercher_jframe} en allant vers le haut
     */
    private javax.swing.JMenuItem rechercher_precedent;
    /**
     * Check box pour définir si on revient à la première occurence ou non lors de la recherche avec {@link #rechercher_jframe rechercher_jframe}
     */
    private javax.swing.JCheckBox rechercher_retour_ligne;
    /**
     * Menu item pour lancer directement la fonctionnalité rechercher {@link #rechercher_jframe rechercher_jframe} en allant vers le bas
     */
    private javax.swing.JMenuItem rechercher_suivant;
    /**
     * Bouton pour lancer la recherche de la fonctionnalité {@link #rechercher_jframe rechercher_jframe}
     */
    private javax.swing.JButton rechercher_suivant_btn;
    /**
     * Menu item pour lancer la fenêtre de la fonctionnalité {@link #remplacer_jframe remplacer_jframe}
     */
    private javax.swing.JMenuItem remplacer;
    /**
     * Bouton pour annuler la fonctionnalité {@link #remplacer_jframe remplacer_jframe}
     */
    private javax.swing.JButton remplacer_annuler1;
    /**
     * Bouton pour lancer la fonctionnalité de {@link #remplacer_jframe remplacer_jframe}
     */
    private javax.swing.JButton remplacer_btn;
    /**
     * Check box qui définit si la recherche pour le remplacement est sensible à la casse
     */
    private javax.swing.JCheckBox remplacer_casse;
    /**
     * Input de la recherche pour le remplacement (valeur de départ)
     */
    private javax.swing.JTextField remplacer_input;
    /**
     * Input de la recherche pour le remplacement (valeur d'arrivée)
     */
    private javax.swing.JTextField remplacer_input2;
    /**
     * Fenêtre de remplacement
     */
    private javax.swing.JFrame remplacer_jframe;
    /**
     * Label pour la fonctionnalité {@link #remplacer_jframe remplacer_jframe}
     */
    private javax.swing.JLabel remplacer_label;
    /**
     * Label pour la fonctionnalité {@link #remplacer_jframe remplacer_jframe}
     */
    private javax.swing.JLabel remplacer_label2;
    /**
     * Check box qui définit si on revient à la première occurence ou non lors de la recherche avec {@link #remplacer_jframe remplacer_jframe}
     */
    private javax.swing.JCheckBox remplacer_retour_ligne;
    /**
     * Bouton pour aller à l'occurence suivant lors du remplacement avec {@link #remplacer_jframe remplacer_jframe}
     */
    private javax.swing.JButton remplacer_suivant_btn1;
    /**
     * Bouton pour remplacer directement toute les occurences avec {@link #remplacer_jframe remplacer_jframe}
     */
    private javax.swing.JButton remplacer_tout_btn;
    /**
     * Menu item pour définir si le retour à la ligne doit être automatique ou non
     */
    private javax.swing.JCheckBoxMenuItem retour_ligne_auto;
    /**
     * Menu item qui sélectionne tout le contenu de {@link #text text}
     */
    private javax.swing.JMenuItem selectionner_tout;
    /**
     * Menu item pour supprimer le contenu sélectionner de {@link #text text}
     */
    private javax.swing.JMenuItem suppr;
    /**
     * Zone de texte du {@link BlocNotes}
     */
    private javax.swing.JTextArea text;
    /**
     * Menu item pour zoomer (diminuer la taille de la police)
     */
    private javax.swing.JMenuItem zoom_arriere;
    /**
     * Menu item pour zoomer (augmenter la taille de la police)
     */
    private javax.swing.JMenuItem zoom_avant;
    /**
     * Menu item pour mettre la taille de la police par défaut
     */
    private javax.swing.JMenuItem zoom_defaut;
    /**
     * Menu du zoom
     */
    private javax.swing.JMenu zoom_menu;
    /**
     * Séparateur pour le menu affichage
     */
    private javax.swing.JPopupMenu.Separator jSeparator1;
    /**
     * Menu Item pour choisir la police
     */
    private javax.swing.JMenuItem choisir_font;
    /**
     * Menu Item pour choisir la couleur de la police
     */
    private javax.swing.JMenuItem couleur_font;
    /**
     * Menu Item pour choisir la couleur de fond
     */
    private javax.swing.JMenuItem couleur_fond;
    /**
     * JFrame du File Chooser pour choisir la police
     */
    private javax.swing.JFrame file_chooser_open_font_jframe;
    /**
     * File Chooser pour choisir la police
     */
    private javax.swing.JFileChooser file_chooser_open_font;
    /**
     * Rétablir la police par défaut
     */
    private javax.swing.JMenuItem font_defaut;
    /**
     * JFrame du Color Chooser pour choisir la couleur de police
     */
    private javax.swing.JFrame couleur_font_jframe;
    /**
     * JFrame du Color Chooser pour choisir la couleur de fond
     */
    private javax.swing.JFrame couleur_fond_jframe;
    /**
     * Color Chooser pour choisir la couleur de police
     */
    private javax.swing.JColorChooser couleur_font_chooser;
    /**
     * Color Chooser pour choisir la couleur de fond
     */
    private javax.swing.JColorChooser couleur_fond_chooser;
    // End of variables declaration//GEN-END:variables
    // End of variables declaration//GEN-END:variables
}
